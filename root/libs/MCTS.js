var MCTS, MCTSNode, gNextID;

gNextID = 0;

MCTSNode = function(d) {
  this.id = gNextID++;
  this.visits = 0;
  this.score = 0;
  this.player = 'X';
  this.action = null;
  this.parent = null;
  this.untried = [];
  _.extend(this, d);
};

MCTS = function(state) {
  this.uctk = 0.1;
  this.iteration = 0;
  this.state = {
    player: 1,
    clone: function() {
      return this;
    },
    apply: function(action) {},
    actions: function() {
      return [];
    },
    score: function(player) {
      return 0;
    }
  };
  this.root = new MCTSNode;
  this.mostPromising = function() {
    if ((this.root == null) || (this.root.children == null) || this.root.children.length === 0) {
      return null;
    }
    return _.max(this.root.children, function(c) {
      return c.score / c.visits;
    });
  };
  this.init = function(state) {
    this.state = state;
    this.root = new MCTSNode;
    this.root.untried = state.actions();
    this.curNode = null;
    this.curState = null;
    return this.defaultPolicy = false;
  };
  this.defaultPolicy = false;
  this.curNode = null;
  this.curState = null;
  this.step = function() {
    var actions, child, children, idx, move, newnode, node, player;
    if (this.defaultPolicy) {
      actions = this.curState.actions();
      if (actions.length > 0) {
        this.curState.apply(actions[Math.floor(Math.random() * actions.length)]);
        return false;
      }
      while (this.curNode !== null) {
        this.curNode.visits = this.curNode.visits + 1;
        this.curNode.score += this.curState.score(this.curNode.player);
        this.curNode = this.curNode.parent;
      }
      this.defaultPolicy = false;
      return true;
    }
    if (this.curNode == null) {
      this.iteration++;
      this.curState = this.state.clone();
      this.curNode = this.root;
      this.defaultPolicy = false;
    }
    if (this.curNode.untried.length === 0 && (this.curNode.children != null) && this.curNode.children.length > 0) {
      node = this.curNode;
      children = _.map(this.curNode.children, function(c) {
        return {
          node: c,
          score: c.score / c.visits + 0.5 * Math.sqrt(2 * Math.log(node.visits / c.visits))
        };
      });
      child = _.last(_.sortBy(children, 'score'));
      this.curState.apply(child.node.action);
      this.curNode = child.node;
      return false;
    }
    if (this.curNode.untried.length > 0) {
      idx = Math.floor(Math.random() * this.curNode.untried.length);
      move = this.curNode.untried.splice(idx, 1)[0];
      player = this.curState.player;
      this.curState.apply(move);
      newnode = new MCTSNode({
        visits: 0,
        score: 0,
        player: player,
        action: move,
        parent: this.curNode,
        untried: this.curState.actions()
      });
      if (this.curNode.children == null) {
        this.curNode.children = [];
      }
      this.curNode.children.push(newnode);
      this.curNode = newnode;
      this.defaultPolicy = true;
      return false;
    }
  };
  this.tick = function() {
    var results, tick;
    tick = 0;
    results = [];
    while (!this.step()) {
      results.push(tick += 1);
    }
    return results;
  };
};

//# sourceMappingURL=data:application/json;base64,