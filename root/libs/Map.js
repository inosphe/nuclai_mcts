var Map;

Map = function(config) {
  this.g = null;
  this.zoom = true;
  this.text = false;
  this.transform = function(d) {
    return "translate(" + d.center.x + "," + d.center.y + ")";
  };
  this.colour = function(d) {
    return "#" + (d.colour_base.slice(0, 6));
  };
  this.opacity = function(d) {
    return 0.2;
  };
  this.stroke = function(d) {
    return "blue";
  };
  _.extend(this, config);
  this.drawPawns = function(data) {
    var actorData, actors, i, j, len, len1, m, ref, ref1, s;
    actorData = [];
    ref = data.squads;
    for (i = 0, len = ref.length; i < len; i++) {
      s = ref[i];
      ref1 = s.members;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        m = ref1[j];
        m.squad = s;
        actorData.push(m);
      }
    }
    this.g.selectAll(".actors").remove();
    actors = this.g.append('g').attr('class', 'actors');
    actors = actors.selectAll(".actor").data(actorData).enter().append("g").attr("class", "actor").attr("transform", function(d) {
      return "translate( " + d.location.x + ", " + d.location.y + " )";
    });
    return actors.append("circle").attr("class", function(d) {
      if ((d.squad != null) && (d.squad.type != null)) {
        return d.squad.type.toLowerCase();
      } else {
        return "creature";
      }
    }).attr("r", "50.0").style("fill", function(d) {
      if (d.squad.health <= 0) {
        return "#DDDDDD";
      } else {
        return "";
      }
    }).style("stroke", function(d) {
      if (d.squad.health <= 0) {
        return "#CCCCCC";
      } else {
        return "";
      }
    });
  };
  this.drawOrders = function(data) {
    var from, i, len, order, orders, ref, results, squad, target, to;
    this.g.selectAll(".orders").remove();
    orders = this.g.append('g').attr('class', 'orders');
    ref = data.squads;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      squad = ref[i];
      order = squad.order != null ? squad.order.toLowerCase() : "";
      if (order === "none" || order === "") {
        continue;
      }
      if (squad.health <= 0) {
        continue;
      }
      target = _.find(data.squads, function(s) {
        return s.name === squad.target;
      });
      to = target != null ? target.members[0].location : squad.targetLocation;
      from = squad.members[0].location;
      results.push(orders.append("line").attr("class", (squad.type.toLowerCase()) + " " + order).attr("x1", from.x).attr("y1", from.y).attr("x2", to.x).attr("y2", to.y).attr("marker-end", "url(#arrowhead)"));
    }
    return results;
  };
  this.drawActors = function(data) {
    if (data == null) {
      return;
    }
    this.drawOrders(data);
    return this.drawPawns(data);
  };
  this.draw = function(data) {
    var linesfunc, rot, xmap, zoom;
    xmap = this;
    linesfunc = d3.svg.line().x(function(d) {
      return d.x;
    }).y(function(d) {
      return d.y;
    }).interpolate("linear-closed");
    if (this.zoom) {
      rot = 0;
      zoom = d3.behavior.zoom().on("zoom", function() {
        xmap.g.attr("transform", "translate( " + d3.event.translate + " ) scale( " + d3.event.scale + " )");
        return console.log(d3.event.translate, d3.event.scale, rot);
      });
      d3.select('#legends_model svg').call(zoom);
    }
    this.g.selectAll(".areas").remove();
    this.g.append('g').attr('class', 'areas').selectAll('.area').data(data.areas).enter().append("g").attr("class", "area").attr("transform", function(d) {
      return xmap.transform(d);
    }).attr("fill-opacity", function(d) {
      return xmap.opacity(d);
    }).style("stroke", function(d) {
      return xmap.stroke(d);
    }).append("path").attr("d", function(d) {
      return linesfunc(d.edges);
    }).attr("fill", function(d) {
      return xmap.colour(d);
    });
    if (this.text) {
      return areas.append("text").attr("transform", function(d) {
        return "translate(" + d.center.x + "," + d.center.y + ")";
      }).text(function(d) {
        return d.id;
      });
    }
  };
};

//# sourceMappingURL=data:application/json;base64,