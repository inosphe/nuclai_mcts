var Tree,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Tree = function(cfg) {
  var xtree;
  this.idx = 0;
  this.g = null;
  this.width = 960;
  this.height = 600;
  this.highlight = [1];
  this.depth = 200;
  this.colour = null;
  this.position = null;
  this.diagonal = d3.svg.diagonal.radial().projection(function(d) {
    return [d.y, (d.x + 90) / 180 * Math.PI];
  });
  this.tree = d3.layout.tree().size([360, this.height / 2 - 50]).separation(function(a, b) {
    return (a.parent === b.parent ? 1 : 2) / (a.depth > 0 ? a.depth : 1);
  });
  this.heatmap = d3.scale.linear().domain([0.0, 0.25, 0.5, 0.75, 1.0]).range(["#d7191c", "#fdae61", "#ffffbf", "#a6d96a", "#1a9641"]);
  xtree = this;
  this.translate = function(d) {
    return "rotate( " + d.x + " ) translate( " + d.y + " )";
  };
  this.stroke = function(d) {
    var ref;
    if (ref = d.id, indexOf.call(xtree.highlight, ref) >= 0) {
      return 'black';
    } else {
      return '';
    }
  };
  _.extend(this, cfg);
  this.draw = function(root) {
    var enter, link, links, node, nodes;
    xtree = this;
    root.x0 = 0;
    root.y0 = 0;
    if (this.position != null) {
      this.position(this.g);
    } else {
      this.g.attr('transform', "translate( " + (this.width / 2) + ", " + (this.height / 2) + ")");
    }
    this.g.selectAll('.link').remove();
    this.g.selectAll('.node').remove();
    nodes = this.tree.nodes(root);
    links = this.tree.links(nodes);
    nodes.forEach(function(d) {
      return d.y = d.depth * xtree.depth;
    });
    link = this.g.selectAll('.link').data(links);
    enter = link.enter().append('path').attr('class', 'link').attr('d', this.diagonal).attr('stroke', function(d) {
      var ref, ref1;
      if ((ref = d.source.id, indexOf.call(xtree.highlight, ref) >= 0) && (ref1 = d.target.id, indexOf.call(xtree.highlight, ref1) >= 0)) {
        return "black";
      } else {
        return "#ccc";
      }
    }).attr('stroke-width', function(d) {
      var ref, ref1;
      if ((ref = d.source.id, indexOf.call(xtree.highlight, ref) >= 0) && (ref1 = d.target.id, indexOf.call(xtree.highlight, ref1) >= 0)) {
        return '3px';
      } else {
        return '1.5px';
      }
    });
    node = this.g.selectAll('.node').data(nodes, function(d) {
      return d.id || (d.id = ++xtree.idx);
    });
    enter = node.enter().append('g').attr('class', 'node').attr('transform', xtree.translate).attr('id', function(d) {
      return "node_" + d.id;
    });
    return enter.append('circle').attr('r', 30).attr('stroke', xtree.stroke).attr('stroke-width', function(d) {
      var ref;
      if (ref = d.id, indexOf.call(xtree.highlight, ref) >= 0) {
        return '3px';
      } else {
        return '1.5px';
      }
    }).attr('fill', function(d) {
      if (xtree.colour != null) {
        return xtree.colour(d);
      } else if (d.parent === null || d.visits === 0) {
        return '#ccc';
      } else {
        return xtree.heatmap(d.score / d.visits);
      }
    });
  };
};

//# sourceMappingURL=data:application/json;base64,