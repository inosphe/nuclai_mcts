var XOXState,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

XOXState = function(cpy) {
  var e, i, j, len, ref;
  this.player = 'X';
  this.board = [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '];
  this.text = "";
  this.scoreline = [];
  this.highlight = [];
  this.moves = [];
  if ((cpy != null) && (cpy.board != null)) {
    this.player = cpy.player;
    ref = cpy.board;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      e = ref[i];
      this.board[i] = e;
    }
  }
  this.clone = function() {
    return new XOXState(this);
  };
  this.apply = function(pos) {
    this.board[pos] = this.player;
    return this.player = this.player === 'X' ? 'O' : 'X';
  };
  this.actions = function() {
    var a, k, len1, ref1, score;
    score = this.score('X');
    if (score !== 0.5) {
      return [];
    }
    a = [];
    ref1 = this.board;
    for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
      e = ref1[i];
      if (e === ' ') {
        a.push(i);
      }
    }
    return a;
  };
  this.score = function(player) {
    var k, l, len1, ref1, ref2;
    this.scoreline = [];
    ref1 = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      l = ref1[k];
      if ((this.board[l[0]] === (ref2 = this.board[l[1]]) && ref2 === this.board[l[2]]) && this.board[l[0]] !== ' ') {
        this.scoreline = l;
        if (this.board[l[0]] === player) {
          return 1.0;
        } else {
          return 0.0;
        }
      }
    }
    return 0.5;
  };
  this.drawSVG = function() {
    var board, colour, d, el, idx, k, len1, p1, p2, pos, ref1, results, score, state, svg, use;
    svg = $("#mcts svg");
    board = d3.select(svg[0]);
    board.selectAll('#board use').remove();
    state = this.text;
    colour = "black";
    if (this.actions().length === 0) {
      score = this.score('X');
      if (score === 1) {
        state = "Win";
        colour = "green";
      } else if (score === 0) {
        state = "Lose";
        colour = "red";
      } else {
        state = "Draw";
      }
    }
    board.select('#board text').text(state).attr('stroke', colour).attr('fill', colour);
    p1 = {
      x: 0,
      y: 0
    };
    p2 = {
      x: 0,
      y: 0
    };
    d = {
      x: 0,
      y: 0
    };
    if (this.scoreline.length > 0) {
      p1.x = (this.scoreline[0] % 3) * 100 + 50;
      p1.y = Math.floor(this.scoreline[0] / 3) * 100 + 50;
      p2.x = (this.scoreline[2] % 3) * 100 + 50;
      p2.y = Math.floor(this.scoreline[2] / 3) * 100 + 50;
      d.x = (p2.x - p1.x) / 4;
      d.y = (p2.y - p1.y) / 4;
      p1.x -= d.x;
      p1.y -= d.y;
      p2.x += d.x;
      p2.y += d.y;
    }
    board.select('#board #win line').attr('x1', p1.x).attr('y1', p1.y).attr('x2', p2.x).attr('y2', p2.y).attr('stroke', state === "Win" ? "green" : "Red");
    ref1 = this.board;
    results = [];
    for (idx = k = 0, len1 = ref1.length; k < len1; idx = ++k) {
      el = ref1[idx];
      pos = board.select("#p" + idx);
      use = null;
      if (indexOf.call(this.highlight, idx) >= 0) {
        if (el === 'O') {
          pos.append('use').attr('xlink:href', '#highlight_o');
        } else {
          pos.append('use').attr('xlink:href', '#highlight_x');
        }
      }
      if (el === 'X') {
        results.push(pos.append('use').attr('xlink:href', '#cross').attr('stroke', indexOf.call(this.moves, idx) >= 0 ? 'black' : '#888'));
      } else if (el === 'O') {
        results.push(pos.append('use').attr('xlink:href', '#nought').attr('stroke', indexOf.call(this.moves, idx) >= 0 ? 'black' : '#888'));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };
};

new Slide({
  id: "mcts",
  onShow: function(e) {
    var cx, cy, root, scale, svg;
    this.xox = new XOXState;
    this.mcts = new MCTS;
    this.mcts.init(this.xox);
    this.stop = false;
    svg = $("#mcts svg");
    root = d3.select(svg[0]);
    cx = svg.width() / 2;
    cy = svg.height() / 2;
    scale = 2;
    root.select('#tree > *').remove();
    root.select('#iter').attr('display', 'none');
    root.select('#iter > text').text("Iteration 1");
    root.select('#board2').attr('display', 'none');
    root.select('#board').attr('transform', "translate( " + (cx - 150 * scale) + ", " + (cy - 150 * scale) + " ) scale( " + scale + ")");
    return this.xox.drawSVG();
  },
  onHide: function(e) {},
  onFragementShow: function(e) {
    var cx, cy, ey, highlight, i, j, margin, move, node, nodes, play, root, scale, separation, slide, svg, sy;
    slide = this;
    svg = $("#mcts svg");
    root = d3.select(svg[0]);
    cx = svg.width() / 2;
    cy = svg.height() / 2;
    switch (e.fragment.id) {
      case "xox_smartmoves":
        this.xox.highlight = [0, 1, 4];
        return this.xox.drawSVG();
      case "xox_pickone":
        this.mcts.step();
        this.mcts.curState.highlight = [this.mcts.curNode.action];
        this.mcts.curState.moves = [this.mcts.curNode.action];
        return this.mcts.curState.drawSVG();
      case "xox_transition1":
        root.select('#board').transition().duration(500).attr('transform', "translate( 0,0 ) scale(0.75)");
        return setTimeout((function() {
          return Reveal.nextFragment();
        }), 500);
      case "xox_playtoend":
        this.tree = new Tree({
          g: root.select('#tree'),
          width: svg.width(),
          height: svg.height()
        });
        this.tree.highlight = [];
        this.tree.draw(this.mcts.root);
        play = function() {
          var finished;
          finished = slide.mcts.step();
          slide.mcts.curState.drawSVG();
          if (finished) {
            slide.tree.draw(slide.mcts.root);
            return root.select('#iter').attr('display', 'block').attr('transform', function(d) {
              return "translate( " + cx + ", " + (cy + 200) + " )";
            }).attr('text-anchor', 'middle');
          } else {
            return setTimeout(play, 100);
          }
        };
        return setTimeout(play, 100);
      case "xox_first9":
        for (i = j = 1; j <= 8; i = ++j) {
          this.mcts.tick();
        }
        this.tree.highlight = [];
        this.tree.draw(this.mcts.root);
        root.select('#iter > text').text(this.mcts.iteration).attr('text-anchor', 'end');
        root.select('#iter').transition().duration(500).attr('transform', function(d) {
          return "translate( " + (svg.width()) + ", " + (svg.height() - 30) + " )";
        });
        this.tree.g.selectAll('.node').attr('transform', function(d) {
          return "rotate( " + 180. + " ) translate( " + d.y + " )";
        }).transition().duration(500).attrTween("transform", function(d) {
          return d3.interpolateString("rotate(" + 180. + ") translate( " + d.y + " )", "rotate( " + d.x + " ) translate( " + d.y + " )");
        });
        this.tree.g.selectAll('.link').attr('d', function(d) {
          return slide.tree.diagonal({
            source: {
              x: d.source.x,
              y: d.source.y
            },
            target: {
              x: d.source.x,
              y: d.source.y
            }
          });
        }).transition().delay(200).duration(300).attr('d', function(d) {
          return slide.tree.diagonal({
            source: {
              x: d.source.x,
              y: d.source.y
            },
            target: {
              x: d.target.x,
              y: d.target.y
            }
          });
        });
        this.xox.highlight = [];
        return this.xox.drawSVG();
      case "xox_select":
        this.mcts.step();
        this.mcts.step();
        this.mcts.curState.highlight = [];
        this.mcts.curState.moves = [];
        this.tree.highlight = [0];
        node = this.mcts.curNode;
        while (node !== null) {
          this.tree.highlight.push(node.id);
          this.mcts.curState.highlight.push(node.action);
          this.mcts.curState.moves.push(node.action);
          node = node.parent;
        }
        this.mcts.curState.drawSVG();
        this.tree.draw(this.mcts.root);
        return root.select('#iter > text').text(this.mcts.iteration).attr('text-anchor', 'end');
      case "xox_continue":
        play = function() {
          slide.mcts.step();
          slide.mcts.curState.highlight = [];
          slide.mcts.curState.moves = [];
          slide.tree.highlight = [0];
          node = slide.mcts.curNode;
          while (node !== null) {
            slide.tree.highlight.push(node.id);
            slide.mcts.curState.highlight.push(node.action);
            slide.mcts.curState.moves.push(node.action);
            node = node.parent;
          }
          slide.mcts.curState.drawSVG();
          slide.tree.draw(slide.mcts.root);
          root.select('#iter > text').text(slide.mcts.iteration);
          if (!slide.stop) {
            return setTimeout(play, 100);
          }
        };
        return setTimeout(play, 100);
      case "xox_stop":
        this.stop = true;
        highlight = function() {
          root.select('#board').transition().duration(500).attr('transform', "scale(0)");
          root.selectAll('.link').attr('stroke', "#ccc").attr('stroke-width', "1.5px").attr('stroke-opacity', "0.7");
          return root.selectAll('#tree circle').attr('stroke', '').attr('fill', function(d) {
            if ((d.parent != null) && !d.parent.parent) {
              return d3.select(this).attr("fill");
            } else {
              return "whitesmoke";
            }
          }).attr('fill-opacity', function(d) {
            if ((d.parent != null) && !d.parent.parent) {
              return "1.0";
            } else {
              return "0.7";
            }
          });
        };
        return setTimeout(highlight, 500);
      case "xox_rank":
        nodes = _.sortBy(this.mcts.root.children, function(c) {
          return -c.score / c.visits;
        });
        move = _.first(nodes).action;
        this.xox.apply(move);
        this.xox.moves = [move];
        this.xox.highlight = [move];
        this.xox.drawSVG();
        root.selectAll('#tree g').filter(function(d) {
          return (d.parent == null) || d.parent.parent;
        }).remove();
        root.selectAll('.link').remove();
        separation = 80;
        root.selectAll('#tree g').transition().duration(500).attr('class', function(d) {
          if (_.indexOf(nodes, d) === 0) {
            return 'topnode';
          } else {
            return '';
          }
        }).attr('transform', function(d) {
          return "translate( 0 , " + (_.indexOf(nodes, d) * separation - 4.5 * separation) + " )";
        });
        root.selectAll('#tree g').append('text').attr('class', 'xox_right').attr('transform', function(d) {
          return "translate( 2000, 17 )";
        }).text(function(d) {
          return (d.score / d.visits).toFixed(2);
        }).transition().delay(500).duration(500).attr('transform', function(d) {
          return "translate( 50, 17 )";
        });
        return root.selectAll('#tree g').append('text').attr('class', 'xox_left').attr('transform', function(d) {
          return "translate( -2000, 17 )";
        }).text(function(d) {
          return d.visits;
        }).transition().delay(500).duration(500).attr('transform', function(d) {
          return "translate( -55, 17 )";
        });
      case "xox_move":
        this.xox.drawSVG();
        root.select('#tree').transition().duration(500).attr('transform', function(d) {
          return "translate( " + (cx - 300) + ", " + cy + " )";
        });
        scale = 1.5;
        root.select('#board').attr('transform', function(d) {
          return "translate( " + (cx + 150) + ", " + cy + " ) scale(0)";
        }).transition().delay(500).ease('elastic').duration(500).attr('transform', function(d) {
          return "translate( " + cx + ", " + (cy - 300 * scale / 2) + " ) scale( " + scale + ")";
        });
        return root.select('.topnode').insert('rect', ':first-child').attr('transform', "translate( 20,25 ) scale(0)").attr('width', 400).attr('height', 80).attr('fill', '#cca44a').attr('fill-opacity', 0.5).transition().delay(500).ease('elastic').duration(500).attr('transform', "translate( -160,-40 ) scale(1)");
      case "xox_tactics":
        root.select('#tree').remove();
        scale = 1.5;
        margin = 100;
        sy = cy;
        ey = cy - 420 * scale / 2;
        root.select('#iter').attr('display', 'none');
        root.select('#board').attr('transform', function(d) {
          return "translate( " + (cx - 150 * scale - margin) + ", " + sy + " ) scale(0)";
        }).transition().ease('elastic').duration(500).attr('transform', "translate( " + (cx - 300 * scale - margin) + ", " + ey + " ) scale( " + scale + ")");
        root.select('#board2').attr('display', 'block').attr('transform', function(d) {
          return "translate( " + (cx + margin + 150 * scale) + ", " + sy + " ) scale(0)";
        }).transition().ease('elastic').duration(500).attr('transform', function(d) {
          return "translate( " + (cx + margin) + ", " + ey + " ) scale( " + scale + ")";
        });
        this.xox.board = [' ', 'X', ' ', 'O', 'O', 'X', 'X', ' ', ' '];
        this.xox.moves = [0, 1, 2, 3, 4, 5, 6, 7, 8];
        this.xox.highlight = [5];
        this.xox.text = "~70";
        return this.xox.drawSVG();
    }
  },
  onFragementHide: function(e) {}
});

//# sourceMappingURL=data:application/json;base64,