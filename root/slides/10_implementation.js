new Slide({
  id: 'implementation',
  onShow: function(e) {},
  onFragementHide: function(e) {
    var exec, execr, frag, i, len, order, results, root, svg;
    svg = $("#implementation #arch");
    root = d3.select(svg[0]);
    exec = $("#planexec");
    execr = d3.select(exec[0]);
    execr.select('#arrow').style('display', 'none');
    root.select('#highlights').selectAll('path').attr('stroke', '#666666').attr('fill', '#666666');
    order = ["imp_snapshot", "imp_simulate", "imp_exec", "imp_delay"];
    results = [];
    for (i = 0, len = order.length; i < len; i++) {
      frag = order[i];
      if (frag === e.fragment.id) {
        break;
      }
      results.push(this.onFragementShow({
        fragment: {
          id: frag
        }
      }));
    }
    return results;
  },
  onFragementShow: function(e) {
    var exec, execr, root, svg;
    svg = $("#implementation #arch");
    root = d3.select(svg[0]);
    exec = $("#planexec");
    execr = d3.select(exec[0]);
    switch (e.fragment.id) {
      case "imp_snapshot":
        setTimeout((function() {
          return exec.css('display', 'block');
        }), 1000);
        root.selectAll('.sim').attr('stroke', 'red').attr('fill', 'red');
        return root.select('#tree').transition().duration(250).attr('opacity', '0');
      case "imp_simulate":
        execr.select('#red').style('display', 'block').attr('transform', 'matrix(1 0 0 1 100 70)').transition().duration(2000).ease('linear').attr('transform', 'matrix(1 0 0 1 520 70)');
        return root.selectAll('.run').attr('stroke', 'red').attr('fill', 'red');
      case "imp_exec":
        return root.selectAll('.exec').attr('stroke', 'red').attr('fill', 'red');
      case "imp_delay":
        $('#pegap').css('display', 'block');
        return execr.select('#arrow').style('display', 'block');
    }
  }
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNsaWRlcy8xMF9pbXBsZW1lbnRhdGlvbi5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUksSUFBQSxLQUFBLENBRUY7RUFBQSxFQUFBLEVBQUksZ0JBQUo7RUFFQSxNQUFBLEVBQVEsU0FBQyxDQUFELEdBQUEsQ0FGUjtFQU1BLGVBQUEsRUFBaUIsU0FBQyxDQUFEO0FBRWYsUUFBQTtJQUFBLEdBQUEsR0FBUSxDQUFBLENBQUUsdUJBQUY7SUFDUixJQUFBLEdBQVEsRUFBRSxDQUFDLE1BQUgsQ0FBVSxHQUFJLENBQUEsQ0FBQSxDQUFkO0lBRVIsSUFBQSxHQUFTLENBQUEsQ0FBRSxXQUFGO0lBQ1QsS0FBQSxHQUFTLEVBQUUsQ0FBQyxNQUFILENBQVUsSUFBSyxDQUFBLENBQUEsQ0FBZjtJQUVULEtBQUssQ0FBQyxNQUFOLENBQWEsUUFBYixDQUNFLENBQUMsS0FESCxDQUNTLFNBRFQsRUFDb0IsTUFEcEI7SUFHQSxJQUFJLENBQUMsTUFBTCxDQUFZLGFBQVosQ0FDRSxDQUFDLFNBREgsQ0FDYSxNQURiLENBRUksQ0FBQyxJQUZMLENBRVUsUUFGVixFQUVvQixTQUZwQixDQUdJLENBQUMsSUFITCxDQUdVLE1BSFYsRUFHa0IsU0FIbEI7SUFLQSxLQUFBLEdBQVEsQ0FDTixjQURNLEVBRU4sY0FGTSxFQUdOLFVBSE0sRUFJTixXQUpNO0FBT1I7U0FBQSx1Q0FBQTs7TUFDRSxJQUFTLElBQUEsS0FBUSxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQTVCO0FBQUEsY0FBQTs7bUJBQ0EsSUFBQyxDQUFBLGVBQUQsQ0FBaUI7UUFBQSxRQUFBLEVBQVU7VUFBQSxFQUFBLEVBQUksSUFBSjtTQUFWO09BQWpCO0FBRkY7O0VBdkJlLENBTmpCO0VBa0NBLGVBQUEsRUFBaUIsU0FBQyxDQUFEO0FBRWYsUUFBQTtJQUFBLEdBQUEsR0FBUSxDQUFBLENBQUUsdUJBQUY7SUFDUixJQUFBLEdBQVEsRUFBRSxDQUFDLE1BQUgsQ0FBVSxHQUFJLENBQUEsQ0FBQSxDQUFkO0lBRVIsSUFBQSxHQUFTLENBQUEsQ0FBRSxXQUFGO0lBQ1QsS0FBQSxHQUFTLEVBQUUsQ0FBQyxNQUFILENBQVUsSUFBSyxDQUFBLENBQUEsQ0FBZjtBQUVULFlBQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFsQjtBQUFBLFdBRU8sY0FGUDtRQUlJLFVBQUEsQ0FBVyxDQUFFLFNBQUE7aUJBQUcsSUFBSSxDQUFDLEdBQUwsQ0FBUyxTQUFULEVBQW9CLE9BQXBCO1FBQUgsQ0FBRixDQUFYLEVBQStDLElBQS9DO1FBRUEsSUFBSSxDQUFDLFNBQUwsQ0FBZSxNQUFmLENBQ0UsQ0FBQyxJQURILENBQ1EsUUFEUixFQUNrQixLQURsQixDQUVFLENBQUMsSUFGSCxDQUVRLE1BRlIsRUFFZ0IsS0FGaEI7ZUFJQSxJQUFJLENBQUMsTUFBTCxDQUFZLE9BQVosQ0FDRSxDQUFDLFVBREgsQ0FBQSxDQUVJLENBQUMsUUFGTCxDQUVjLEdBRmQsQ0FHSSxDQUFDLElBSEwsQ0FHVSxTQUhWLEVBR3FCLEdBSHJCO0FBVkosV0FlTyxjQWZQO1FBaUJJLEtBQUssQ0FBQyxNQUFOLENBQWEsTUFBYixDQUNFLENBQUMsS0FESCxDQUNTLFNBRFQsRUFDb0IsT0FEcEIsQ0FFRSxDQUFDLElBRkgsQ0FFUSxXQUZSLEVBRXFCLHdCQUZyQixDQUdFLENBQUMsVUFISCxDQUFBLENBSUksQ0FBQyxRQUpMLENBSWMsSUFKZCxDQUtJLENBQUMsSUFMTCxDQUtVLFFBTFYsQ0FNSSxDQUFDLElBTkwsQ0FNVSxXQU5WLEVBTXVCLHdCQU52QjtlQVFBLElBQUksQ0FBQyxTQUFMLENBQWUsTUFBZixDQUNFLENBQUMsSUFESCxDQUNRLFFBRFIsRUFDa0IsS0FEbEIsQ0FFRSxDQUFDLElBRkgsQ0FFUSxNQUZSLEVBRWdCLEtBRmhCO0FBekJKLFdBOEJPLFVBOUJQO2VBZ0NJLElBQUksQ0FBQyxTQUFMLENBQWUsT0FBZixDQUNFLENBQUMsSUFESCxDQUNRLFFBRFIsRUFDa0IsS0FEbEIsQ0FFRSxDQUFDLElBRkgsQ0FFUSxNQUZSLEVBRWdCLEtBRmhCO0FBaENKLFdBb0NPLFdBcENQO1FBc0NJLENBQUEsQ0FBRyxRQUFILENBQWEsQ0FBQyxHQUFkLENBQWtCLFNBQWxCLEVBQTZCLE9BQTdCO2VBRUEsS0FBSyxDQUFDLE1BQU4sQ0FBYSxRQUFiLENBQ0UsQ0FBQyxLQURILENBQ1MsU0FEVCxFQUNvQixPQURwQjtBQXhDSjtFQVJlLENBbENqQjtDQUZFIiwiZmlsZSI6InNsaWRlcy8xMF9pbXBsZW1lbnRhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbm5ldyBTbGlkZVxuXG4gIGlkOiAnaW1wbGVtZW50YXRpb24nXG5cbiAgb25TaG93OiAoZSkgLT5cblxuICAgICMgQGRyYXdNYXAoKVxuXG4gIG9uRnJhZ2VtZW50SGlkZTogKGUpIC0+XG5cbiAgICBzdmcgICA9ICQgXCIjaW1wbGVtZW50YXRpb24gI2FyY2hcIlxuICAgIHJvb3QgID0gZDMuc2VsZWN0IHN2Z1swXVxuXG4gICAgZXhlYyAgID0gJCBcIiNwbGFuZXhlY1wiXG4gICAgZXhlY3IgID0gZDMuc2VsZWN0IGV4ZWNbMF1cblxuICAgIGV4ZWNyLnNlbGVjdCAnI2Fycm93J1xuICAgICAgLnN0eWxlICdkaXNwbGF5JywgJ25vbmUnXG5cbiAgICByb290LnNlbGVjdCAnI2hpZ2hsaWdodHMnXG4gICAgICAuc2VsZWN0QWxsICdwYXRoJ1xuICAgICAgICAuYXR0ciAnc3Ryb2tlJywgJyM2NjY2NjYnXG4gICAgICAgIC5hdHRyICdmaWxsJywgJyM2NjY2NjYnXG5cbiAgICBvcmRlciA9IFtcbiAgICAgIFwiaW1wX3NuYXBzaG90XCJcbiAgICAgIFwiaW1wX3NpbXVsYXRlXCJcbiAgICAgIFwiaW1wX2V4ZWNcIlxuICAgICAgXCJpbXBfZGVsYXlcIlxuICAgIF1cblxuICAgIGZvciBmcmFnIGluIG9yZGVyXG4gICAgICBicmVhayBpZiBmcmFnIGlzIGUuZnJhZ21lbnQuaWRcbiAgICAgIEBvbkZyYWdlbWVudFNob3cgZnJhZ21lbnQ6IGlkOiBmcmFnXG5cblxuICBvbkZyYWdlbWVudFNob3c6IChlKSAtPlxuXG4gICAgc3ZnICAgPSAkIFwiI2ltcGxlbWVudGF0aW9uICNhcmNoXCJcbiAgICByb290ICA9IGQzLnNlbGVjdCBzdmdbMF1cblxuICAgIGV4ZWMgICA9ICQgXCIjcGxhbmV4ZWNcIlxuICAgIGV4ZWNyICA9IGQzLnNlbGVjdCBleGVjWzBdXG5cbiAgICBzd2l0Y2ggZS5mcmFnbWVudC5pZFxuXG4gICAgICB3aGVuIFwiaW1wX3NuYXBzaG90XCJcblxuICAgICAgICBzZXRUaW1lb3V0ICggLT4gZXhlYy5jc3MgJ2Rpc3BsYXknLCAnYmxvY2snICksIDEwMDBcblxuICAgICAgICByb290LnNlbGVjdEFsbCAnLnNpbSdcbiAgICAgICAgICAuYXR0ciAnc3Ryb2tlJywgJ3JlZCdcbiAgICAgICAgICAuYXR0ciAnZmlsbCcsICdyZWQnXG5cbiAgICAgICAgcm9vdC5zZWxlY3QgJyN0cmVlJ1xuICAgICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgICAgIC5kdXJhdGlvbiAyNTBcbiAgICAgICAgICAgIC5hdHRyICdvcGFjaXR5JywgJzAnXG5cbiAgICAgIHdoZW4gXCJpbXBfc2ltdWxhdGVcIlxuXG4gICAgICAgIGV4ZWNyLnNlbGVjdCAnI3JlZCdcbiAgICAgICAgICAuc3R5bGUgJ2Rpc3BsYXknLCAnYmxvY2snXG4gICAgICAgICAgLmF0dHIgJ3RyYW5zZm9ybScsICdtYXRyaXgoMSAwIDAgMSAxMDAgNzApJ1xuICAgICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgICAgIC5kdXJhdGlvbiAyMDAwXG4gICAgICAgICAgICAuZWFzZSAnbGluZWFyJ1xuICAgICAgICAgICAgLmF0dHIgJ3RyYW5zZm9ybScsICdtYXRyaXgoMSAwIDAgMSA1MjAgNzApJ1xuXG4gICAgICAgIHJvb3Quc2VsZWN0QWxsICcucnVuJ1xuICAgICAgICAgIC5hdHRyICdzdHJva2UnLCAncmVkJ1xuICAgICAgICAgIC5hdHRyICdmaWxsJywgJ3JlZCdcblxuXG4gICAgICB3aGVuIFwiaW1wX2V4ZWNcIlxuXG4gICAgICAgIHJvb3Quc2VsZWN0QWxsICcuZXhlYydcbiAgICAgICAgICAuYXR0ciAnc3Ryb2tlJywgJ3JlZCdcbiAgICAgICAgICAuYXR0ciAnZmlsbCcsICdyZWQnXG5cbiAgICAgIHdoZW4gXCJpbXBfZGVsYXlcIlxuXG4gICAgICAgICQoICcjcGVnYXAnICkuY3NzICdkaXNwbGF5JywgJ2Jsb2NrJ1xuXG4gICAgICAgIGV4ZWNyLnNlbGVjdCAnI2Fycm93J1xuICAgICAgICAgIC5zdHlsZSAnZGlzcGxheScsICdibG9jaydcblxuXG4iXX0=