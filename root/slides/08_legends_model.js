var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

new Slide({
  id: 'legends_model',
  sim: 1,
  data: {
    children: [
      {
        children: []
      }, {
        children: []
      }, {
        children: []
      }, {
        children: []
      }, {
        children: []
      }, {
        children: []
      }, {
        children: [
          {
            children: []
          }, {
            children: []
          }, {
            children: []
          }
        ]
      }, {
        children: []
      }
    ]
  },
  create: function() {
    var root, slide, svg;
    svg = $("#legends_model svg");
    root = d3.select(svg[0]);
    slide = this;
    this.map = new Map({
      g: root.select('#map'),
      zoom: false,
      text: false,
      transform: function(d) {
        return "rotate(0) translate(" + d.center.x + "," + d.center.y + ") scale(0)";
      },
      opacity: function(d) {
        return 0;
      },
      stroke: function(d) {
        return "none";
      }
    });
    this.map.draw(gMapData);
    return this.tree = new Tree({
      g: root.select('#tree'),
      width: svg.width(),
      height: svg.height(),
      highlight: [1],
      depth: 150,
      colour: function(d) {
        var ref;
        if (ref = d.id, indexOf.call(slide.tree.highlight, ref) >= 0) {
          return "coral";
        } else {
          return "lightsteelblue";
        }
      },
      stroke: function(d) {
        var ref;
        if (ref = d.id, indexOf.call(slide.tree.highlight, ref) >= 0) {
          return "red";
        } else {
          return "steelblue";
        }
      },
      position: function(g) {
        return g.attr('transform', "translate( 1500, 800 )");
      }
    });
  },
  animatedIn: function() {
    var areas, i;
    areas = this.map.g.selectAll(".area");
    i = 0;
    return areas.transition().delay(function(d) {
      return ++i * 16;
    }).duration(500).ease("elastic").attr('transform', function(d) {
      return "translate(" + d.center.x + "," + d.center.y + ") scale(1.0)";
    }).style('fill-opacity', '0.2').style('stroke', 'blue');
  },
  zoomToAction: function() {
    var root, svg;
    svg = $("#legends_model svg > g");
    root = d3.select(svg[0]);
    return root.transition().duration(1000).ease("cubic-in-out").attr('transform', function(d) {
      return "translate(600,550) rotate(-50) scale(3)";
    }).each("end", function() {
      return Reveal.nextFragment();
    });
  },
  zoomOut: function() {
    var root, svg;
    svg = $("#legends_model svg > g");
    root = d3.select(svg[0]);
    return root.transition().duration(1000).ease("cubic-in-out").attr('transform', function(d) {
      return "translate(1100,450) rotate(0) scale(1.2)";
    });
  },
  showActors: function() {
    var i;
    this.map.drawActors(gSim[this.sim].steps[0]);
    i = 0;
    return this.map.g.selectAll('.actor > circle').attr('r', '0.0').transition().delay(function(d) {
      return ++i * (500 / 14);
    }).duration(500).ease("elastic", 3, 0.8).attr('r', '50.0');
  },
  hideActors: function() {
    this.map.g.selectAll(".actors").remove();
    return this.map.g.selectAll(".orders").remove();
  },
  step: function(id) {
    return this.map.drawActors(gSim[this.sim].steps[id]);
  },
  onReady: function(e) {
    return this.create();
  },
  onFragementHide: function(e) {
    var id;
    if (e.fragment.id.startsWith("lm_step")) {
      id = e.fragment.id.replace("lm_step", "");
      if (--id <= 0) {
        this.hideActors();
      } else {
        this.step(id);
      }
    }
    switch (e.fragment.id) {
      case "lm_zoom":
        return this.zoomOut();
      case "lm_show":
        return this.hideActors();
      case "lm_showtree":
        return this.tree.g.selectAll('*').remove();
    }
  },
  onFragementShow: function(e) {
    if (e.fragment.id.startsWith("lm_step")) {
      this.step(e.fragment.id.replace("lm_step", ""));
    }
    switch (e.fragment.id) {
      case "lm_start":
        return this.animatedIn();
      case "lm_zoom":
        return this.zoomToAction();
      case "lm_show":
        return this.showActors();
      case "lm_showtree":
        this.tree.highlight = [1];
        return this.tree.draw(this.data);
      case "lm_step2":
        this.tree.highlight = [1, 8];
        return this.tree.draw(this.data);
      case "lm_step3":
        this.tree.highlight = [1, 8, 10];
        return this.tree.draw(this.data);
      case "lm_step4":
        return setTimeout((function() {
          return Reveal.nextFragment();
        }), 250);
      case "lm_step5":
        return setTimeout((function() {
          return Reveal.nextFragment();
        }), 250);
      case "lm_score":
        return this.tree.g.selectAll('*').remove();
    }
  }
});

//# sourceMappingURL=data:application/json;base64,