var SSNode, gSSTree;

SSNode = function(p, d) {
  var c, j, len1, ref;
  this.depth = p != null ? p.depth + 1 : 0;
  this.children = [];
  if ((d != null) && (d.children != null)) {
    ref = d.children;
    for (j = 0, len1 = ref.length; j < len1; j++) {
      c = ref[j];
      this.children.push(new SSNode(this, c));
    }
  }
  this.expand = function() {
    var i, k, len, ref1, results;
    if (this.depth > 4) {
      return;
    }
    len = 8 - this.depth * 2;
    this.children = [];
    results = [];
    for (i = k = 1, ref1 = len; 1 <= ref1 ? k <= ref1 : k >= ref1; i = 1 <= ref1 ? ++k : --k) {
      results.push(this.children.push(new SSNode(this)));
    }
    return results;
  };
  this.findPuck = function(b) {
    var db, dt, k, len2, ref1;
    if (this.depth === 5) {
      if (b == null) {
        b = this;
      } else if (this.x / 4 - 45 > -40) {
        db = Math.abs((b.x / 4) - 45);
        dt = Math.abs((this.x / 4) - 45);
        if (db > dt) {
          b = this;
        }
      }
    } else if (this.children != null) {
      ref1 = this.children;
      for (k = 0, len2 = ref1.length; k < len2; k++) {
        c = ref1[k];
        b = c.findPuck(b);
      }
    }
    return b;
  };
};

gSSTree = {
  children: [
    {
      children: [
        {
          children: [
            {}, {}, {
              children: [
                {
                  children: [{}, {}]
                }, {}
              ]
            }, {
              children: [
                {}, {
                  children: [{}, {}]
                }
              ]
            }
          ]
        }, {
          children: [
            {}, {}, {
              children: [
                {
                  children: [{}, {}]
                }, {
                  children: [{}, {}]
                }
              ]
            }, {
              children: [
                {}, {
                  children: [{}, {}]
                }
              ]
            }
          ]
        }, {
          children: [{}, {}, {}, {}]
        }, {}, {
          children: [
            {}, {
              children: [
                {
                  children: [{}, {}]
                }, {
                  children: [{}, {}]
                }
              ]
            }, {
              children: [
                {
                  children: [{}, {}]
                }, {
                  children: [{}, {}]
                }
              ]
            }, {
              children: [{}, {}]
            }
          ]
        }, {
          children: [
            {
              children: [{}, {}]
            }, {
              children: [
                {
                  children: [{}, {}]
                }, {}
              ]
            }, {}, {
              children: [{}, {}]
            }
          ]
        }
      ]
    }, {}, {
      children: [
        {}, {
          children: [
            {}, {}, {
              children: [
                {}, {
                  children: [{}, {}]
                }
              ]
            }, {
              children: [
                {
                  children: [{}, {}]
                }, {
                  children: [{}, {}]
                }
              ]
            }
          ]
        }, {
          children: [
            {
              children: [
                {
                  children: [{}, {}]
                }, {
                  children: [{}, {}]
                }
              ]
            }, {}, {}, {}
          ]
        }, {}, {}, {}
      ]
    }, {}, {}, {}, {
      children: [
        {
          children: [
            {
              children: [
                {}, {
                  children: [{}, {}]
                }
              ]
            }, {}, {}, {
              children: [
                {}, {
                  children: [{}, {}]
                }
              ]
            }
          ]
        }, {}, {}, {}, {
          children: [
            {}, {}, {
              children: [
                {
                  children: [{}, {}]
                }, {
                  children: [{}, {}]
                }
              ]
            }, {}
          ]
        }, {}
      ]
    }, {}
  ]
};

new Slide({
  id: "searchspace",
  cur_node: null,
  ratio: 120 / 360,
  turn: 15,
  createTree: function() {
    return this.data = new SSNode(null, gSSTree);
  },
  doCollapse: function() {
    var node, parent, slide;
    slide = this;
    node = this.cur_node;
    parent = this.cur_node.parent;
    this.root.select(".link_" + node.id).remove();
    this.root.select("#np_" + parent.id + " > circle").transition().delay(100).duration(200).attr('r', '50').each("end", function() {
      return slide.root.select("#np_" + parent.id + " > circle").transition().delay(0).duration(100).attr('r', '0');
    });
    return this.root.select('.node_action').transition().duration(500).attr('transform', "rotate( " + (slide.ratio * parent.x - 90 - slide.turn) + " ) translate( " + parent.y + " )").each("end", function() {
      slide.cur_node = slide.cur_node.parent;
      if ((slide.cur_node != null) && (slide.cur_node.parent != null) && (slide.cur_node.parent.parent != null)) {
        return setTimeout((function() {
          return slide.doCollapse();
        }), 100);
      } else {
        Reveal.nextFragment();
        return slide.root.select('.node_action > circle').transition().duration(2000).attr('fill', '#93C572').attr('stroke', '#568203');
      }
    });
  },
  doExpand: function() {
    var c, e, j, k, len1, len2, nodes, ref, ref1, slide;
    if (this.expand.length === 0) {
      return;
    }
    slide = this;
    nodes = [];
    ref = this.expand;
    for (j = 0, len1 = ref.length; j < len1; j++) {
      e = ref[j];
      if (Math.random() < 0.5) {
        e.expand();
      }
      if (e.children != null) {
        ref1 = e.children;
        for (k = 0, len2 = ref1.length; k < len2; k++) {
          c = ref1[k];
          nodes.push(c);
        }
      }
    }
    setTimeout((function() {
      return slide.doExpand();
    }), 500);
    this.tree.draw(this.data);
    return this.expand = nodes;
  },
  doSetup: function() {
    var slide, svg;
    slide = this;
    svg = $('#searchspace svg');
    this.root = d3.select(svg[0]);
    return this.tree = new Tree({
      g: this.root.select('g'),
      width: svg.width(),
      height: svg.height(),
      highlight: [],
      depth: 200,
      colour: function(d) {
        return "lightsteelblue";
      },
      stroke: function(d) {
        return "steelblue";
      },
      position: function() {},
      diagonal: d3.svg.diagonal.radial().projection(function(d) {
        return [d.y, (slide.ratio * d.x - slide.turn) / 180 * Math.PI];
      }),
      tree: d3.layout.tree().size([360, svg.height() / 2 - 50]).separation(function(a, b) {
        return (a.parent === b.parent ? 1 : 2) / (a.depth > 0 ? a.depth : 1);
      }),
      translate: function(d) {
        return "rotate( " + (slide.ratio * d.x - 90 - slide.turn) + " ) translate( " + d.y + " )";
      }
    });
  },
  onFragementHide: function(e) {
    switch (false) {
      case !(e.fragment.id === "ss_run" || e.fragment.id === "ss_action"):
        this.root.select('g').selectAll('path').remove();
        return this.root.select('g').selectAll('g').remove();
    }
  },
  onReady: function(e) {
    this.doSetup();
    this.createTree();
    return this.tree.draw(this.data);
  },
  onFragementShow: function(e) {
    var d, diagonal, r, results, slide;
    slide = this;
    switch (e.fragment.id) {
      case "ss_action":
        d = this.data.findPuck(null);
        r = d;
        this.cur_node = d;
        diagonal = d3.svg.diagonal.radial().source(function(d) {
          return {
            x: d.parent.x,
            y: d.parent.y
          };
        }).target(function(d) {
          return {
            x: d.x,
            y: d.y
          };
        }).projection(function(d) {
          return [d.y, (slide.ratio * d.x - slide.turn) / 180 * Math.PI];
        });
        while (d) {
          if (d.parent != null) {
            this.root.select('g').append('path').attr('class', "link link_" + d.id).attr('d', diagonal(d)).attr('stroke', function(d) {
              return "red";
            }).attr('stroke-width', function(d) {
              return "5px";
            }).attr('stroke-opacity', 0).transition().delay(1200 + 200 * (4 - d.depth)).duration(10).attr('stroke-opacity', 1);
          }
          d = d.parent;
        }
        d = r;
        this.root.select('g').append('g').attr('class', 'node_action').attr('transform', "rotate( " + (slide.ratio * d.x - 90 - slide.turn) + " ) translate( " + d.y + " )").append('circle').attr('r', '30').attr('stroke', 'red').attr('stroke-width', '3px').attr('fill', 'coral').transition().attr('r', '60').duration(1000).ease('elastic');
        d = r;
        d = d.parent;
        results = [];
        while (d) {
          this.root.select('g').append('g').attr('id', "np_" + d.id).attr('transform', "rotate( " + (slide.ratio * d.x - 90 - slide.turn) + " ) translate( " + d.y + " ) scale(1)").append('circle').attr('r', '30').attr('stroke', 'red').attr('stroke-width', '3px').attr('fill', '#FF8080').attr('stroke-opacity', 0).attr('fill-opacity', 0).transition().delay(1000 + 200 * (4 - d.depth)).duration(200).attr('stroke-opacity', 1).attr('fill-opacity', 1);
          results.push(d = d.parent);
        }
        return results;
        break;
      case "ss_collapse":
        return this.doCollapse();
    }
  }
});

//# sourceMappingURL=data:application/json;base64,