var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

new Slide({
  id: "buckets",
  data: {
    children: [
      {
        children: [
          {
            children: []
          }, {
            children: []
          }, {
            children: []
          }
        ]
      }, {
        children: [
          {
            children: []
          }, {
            children: []
          }, {
            children: []
          }
        ]
      }, {
        children: [
          {
            children: []
          }, {
            children: []
          }, {
            children: []
          }
        ]
      }, {
        children: [
          {
            children: []
          }, {
            children: []
          }, {
            children: []
          }
        ]
      }, {
        children: [
          {
            children: []
          }, {
            children: []
          }, {
            children: []
          }
        ]
      }, {
        children: [
          {
            children: []
          }, {
            children: []
          }, {
            children: []
          }
        ]
      }, {
        children: [
          {
            children: []
          }, {
            children: []
          }, {
            children: []
          }
        ]
      }, {
        children: [
          {
            children: []
          }, {
            children: []
          }, {
            children: []
          }
        ]
      }
    ]
  },
  onReady: function(e) {
    var root, slide, svg;
    slide = this;
    svg = $('#buckets svg');
    root = d3.select(svg[0]);
    this.tree = new Tree({
      g: root.select('#tree'),
      width: svg.width(),
      height: svg.height(),
      highlight: [1],
      depth: 150,
      colour: function(d) {
        var ref;
        if (ref = d.id, indexOf.call(slide.tree.highlight, ref) >= 0) {
          return "coral";
        } else {
          return "lightsteelblue";
        }
      },
      stroke: function(d) {
        var ref;
        if (ref = d.id, indexOf.call(slide.tree.highlight, ref) >= 0) {
          return "red";
        } else {
          return "steelblue";
        }
      },
      position: function(g) {
        return g.attr('transform', "translate( 440, 280 ) scale(0.4)");
      }
    });
    root.selectAll('.rule').each(function() {
      if (this.__transition__ != null) {
        return this.__transition__.active = 0;
      }
    }).attr('display', 'none');
    return root.selectAll('.label').each(function() {
      if (this.__transition__ != null) {
        return this.__transition__.active = 0;
      }
    }).attr('opacity', 0);
  },
  onFragementHide: function(e) {
    var pos, root, slide, svg;
    slide = this;
    svg = $('#buckets svg');
    root = d3.select(svg[0]);
    switch (e.fragment.id) {
      case "b_arrange":
        pos = ["matrix(1 0 0 1 97.63546798029554 156.65024630541944)", "matrix(1 0 0 1 49.753694581281934 40.34482758620838)", "matrix(1 0 0 1 56.403940886700184 216.226600985224)", "matrix(1 0 0 1 216.8965517241381 112.1674876847293)", "matrix(1 0 0 1 138.42364532019704 262.6108374384248)", "matrix(1 0 0 1 260.34482758620743 210.44334975369745)", "matrix(1 0 0 1 310 64.2857142857149)"];
        root.selectAll('.rule').each(function() {
          if (this.__transition__ != null) {
            return this.__transition__.active = 0;
          }
        }).attr('transform', function(d) {
          var id;
          id = this.id.replace("r", "");
          return pos[id - 1];
        });
        return root.selectAll('.label').each(function() {
          if (this.__transition__ != null) {
            return this.__transition__.active = 0;
          }
        }).attr('opacity', 0);
      case "b_predicates":
        root.select('#textroot').each(function() {
          if (this.__transition__ != null) {
            return this.__transition__.active = 0;
          }
        }).attr('transform', "translate(0,0)");
        root.selectAll('.pred').each(function() {
          if (this.__transition__ != null) {
            return this.__transition__.active = 0;
          }
        }).attr('opacity', 0);
        return this.onFragementShow({
          fragment: {
            id: "b_arrange"
          }
        });
      case "b_root":
        root.select('#tree').attr('display', "none");
        root.select('#bucket1').attr('display', "none");
        return root.select('#bucket2').attr('display', "none");
      case "b_node1":
        return this.onFragementShow({
          fragment: {
            id: "b_root"
          }
        });
      case "b_node2":
        return this.onFragementShow({
          fragment: {
            id: "b_node1"
          }
        });
    }
  },
  onShow: function(e) {
    var i, root, svg;
    svg = $('#buckets svg');
    root = d3.select(svg[0]);
    i = 0;
    return root.selectAll('.rule').transition().delay(function(d) {
      return ++i * 50;
    }).attr('display', 'block');
  },
  onFragementShow: function(e) {
    var root, slide, svg;
    slide = this;
    svg = $('#buckets svg');
    root = d3.select(svg[0]);
    switch (e.fragment.id) {
      case "b_arrange":
        root.selectAll('.rule').transition().duration(1000).attr('transform', function(d) {
          var id, offset;
          id = this.id.replace("r", "");
          offset = id > 3 ? 90 : 30;
          return "matrix(1 0 0 1 220 " + (offset + id * 30) + ")";
        });
        return root.selectAll('.label').transition().delay(500).duration(500).attr('opacity', 1);
      case "b_predicates":
        root.select('#textroot').transition().duration(500).attr('transform', "translate(-75,0)");
        root.selectAll('.pred').transition().delay(250).duration(500).attr('opacity', 1);
        return root.selectAll('.rule').transition().duration(500).attr('transform', function(d) {
          var id, offset;
          id = this.id.replace("r", "");
          offset = id > 3 ? 120 : 60;
          return "matrix(1 0 0 1 250 " + (offset + id * 30) + ")";
        });
      case "b_root":
        this.tree.highlight = [1];
        root.select('#tree').attr('display', "block");
        root.select('#textroot').transition().duration(500).attr('transform', "translate(-50,20)scale(0.7)");
        return setTimeout((function() {
          return slide.tree.draw(slide.data);
        }), 500);
      case "b_node1":
        this.tree.highlight = [1, 22];
        this.tree.draw(this.data);
        root.select('#bucket1').attr('display', "block");
        return root.select('#bucket2').attr('display', "none");
      case "b_node2":
        this.tree.highlight = [1, 22, 25];
        this.tree.draw(this.data);
        root.select('#bucket1').attr('display', "none");
        return root.select('#bucket2').attr('display', "block");
    }
  }
});

//# sourceMappingURL=data:application/json;base64,