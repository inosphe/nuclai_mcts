%section#macroactions

  %div{ style: "position: relative; height: 920px;" }

    %h3{ style:"position: absolute; top: 20px; right: 150px;" } Rules

    %div.fragment.fade-out{ style:"position: absolute; top: 150px; left: 0px; width: 100%; height: 920px;", "data-fragment-index" => "2" }

      %pre{ style:"position: absolute; top: 0px; left: 96px;" }
        :preserve
          Attack := !waiting &
                    [ creatures | can( attack ) ]
                    x [ heroes | isTargetable ]

      %pre.fragment.fade-in{ style:"position: absolute; top: 200px; left: 430px; width: 1920px;", "data-fragment-index" => "1" }
        :preserve
          Attack( redcap_melee1, charming )
          Attack( redcap_melee1, winter )
          Attack( redcap_melee2, charming )
          Attack( puck, malice )

    %div{ style:"position: absolute; top: 150px; left: 0px; width: 100%; height: 920px;" }

      %pre.fragment.fade-in{ style:"position: absolute; top: 0px; left: 96px;", "data-fragment-index" => "2" }
        :preserve
          PuckStealth :=
                !waiting & cooldown( puck ) &
                [ creatures | puck | can( special ) ]
                x [ heroes | isTargetable | straggler ]

      %pre.fragment.fade-in{ style:"position: absolute; top: 250px; left: 200px; width: 1920px;", "data-fragment-index" => "3" }
        :preserve
          PuckStealth( puck1, shroud )

      %pre.fragment.fade-in{ style:"position: absolute; top: 320px; left: 300px; width: 1920px;", "data-fragment-index" => "3" }
        :preserve
          Special( puck1 )
          Move( puck1, shroud )
          WaitOpportunity( puck1, shroud )
          Attack( puck1, shroud )

    %div.fragment.fade-out{ style:"position: absolute; top: 800px; left: 0px; width: 100%;", "data-fragment-index" => "1" }
      Rules are used to analyse the simulation state
      %br/
      and create the actions for the villain to try

    %div.fragment.current-visible{ style:"position: absolute; top: 800px; left: 0px; width: 100%;", "data-fragment-index" => "1" }
      Written in this functional manner, they evaluate to a set of
      %br/
      tuples, which are the parameters for the associated action.

    %div.fragment.current-visible{ style:"position: absolute; top: 800px; left: 0px; width: 100%;", "data-fragment-index" => "2" }
      Macro actions are no different ...

    %div.fragment.current-visible{ style:"position: absolute; top: 800px; left: 0px; width: 100%;", "data-fragment-index" => "3" }
      Excpect the action is a list of atomic operations and a controller,
      %br/
      which executes them appropriately within the simulation
      %br/
      and game

